// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using SMS.Entities.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace SMS.Entities.Models
{
    public partial class SmsContext
    {
        private ISmsContextProcedures _procedures;

        public virtual ISmsContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SmsContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ISmsContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class SmsContextProcedures : ISmsContextProcedures
    {
        private readonly SmsContext _context;

        public SmsContextProcedures(SmsContext context)
        {
            _context = context;
        }

        public virtual async Task<List<usp_AssignRoleResult>> usp_AssignRoleAsync(int? userId, string roleName, int? createdByUserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 100,
                    Value = roleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedByUserId",
                    Value = createdByUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_AssignRoleResult>("EXEC @returnValue = [dbo].[usp_AssignRole] @UserId = @UserId, @RoleName = @RoleName, @CreatedByUserId = @CreatedByUserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_CreateUserResult>> usp_CreateUserAsync(string username, string email, string phone, byte[] passwordHash, byte[] passwordSalt, string passwordAlg, int? passwordIters, int? createdByUserId, OutputParameter<int?> newUserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNewUserId = new SqlParameter
            {
                ParameterName = "NewUserId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = newUserId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Username",
                    Size = 200,
                    Value = username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 512,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 60,
                    Value = phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordHash",
                    Size = 512,
                    Value = passwordHash ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordSalt",
                    Size = 128,
                    Value = passwordSalt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAlg",
                    Size = 80,
                    Value = passwordAlg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordIters",
                    Value = passwordIters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedByUserId",
                    Value = createdByUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterNewUserId,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_CreateUserResult>("EXEC @returnValue = [dbo].[usp_CreateUser] @Username = @Username, @Email = @Email, @Phone = @Phone, @PasswordHash = @PasswordHash, @PasswordSalt = @PasswordSalt, @PasswordAlg = @PasswordAlg, @PasswordIters = @PasswordIters, @CreatedByUserId = @CreatedByUserId, @NewUserId = @NewUserId OUTPUT", sqlParameters, cancellationToken);

            newUserId?.SetValue(parameterNewUserId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_LinkUserToGuardianResult>> usp_LinkUserToGuardianAsync(int? userId, int? guardianId, int? updatedByUserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GuardianId",
                    Value = guardianId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedByUserId",
                    Value = updatedByUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_LinkUserToGuardianResult>("EXEC @returnValue = [dbo].[usp_LinkUserToGuardian] @UserId = @UserId, @GuardianId = @GuardianId, @UpdatedByUserId = @UpdatedByUserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_LinkUserToStaffResult>> usp_LinkUserToStaffAsync(int? userId, int? staffId, int? updatedByUserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StaffId",
                    Value = staffId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedByUserId",
                    Value = updatedByUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_LinkUserToStaffResult>("EXEC @returnValue = [dbo].[usp_LinkUserToStaff] @UserId = @UserId, @StaffId = @StaffId, @UpdatedByUserId = @UpdatedByUserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_LinkUserToStudentResult>> usp_LinkUserToStudentAsync(int? userId, int? studentId, int? updatedByUserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StudentId",
                    Value = studentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedByUserId",
                    Value = updatedByUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_LinkUserToStudentResult>("EXEC @returnValue = [dbo].[usp_LinkUserToStudent] @UserId = @UserId, @StudentId = @StudentId, @UpdatedByUserId = @UpdatedByUserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
